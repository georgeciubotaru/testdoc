{
  "type": "File",
  "start": 0,
  "end": 1069,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 52,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 1069,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 52,
        "column": 0
      }
    },
    "sourceType": "script",
    "interpreter": null,
    "body": [
      {
        "type": "VariableDeclaration",
        "start": 45,
        "end": 70,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 25
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 51,
            "end": 69,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 24
              }
            },
            "id": {
              "type": "Identifier",
              "start": 51,
              "end": 62,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 17
                },
                "identifierName": "expect"
              },
              "name": "expect",
              "typeAnnotation": {
                "type": "TSTypeAnnotation",
                "start": 57,
                "end": 62,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 4,
                    "column": 17
                  }
                },
                "typeAnnotation": {
                  "type": "TSAnyKeyword",
                  "start": 59,
                  "end": 62,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 14
                    },
                    "end": {
                      "line": 4,
                      "column": 17
                    }
                  }
                }
              }
            },
            "init": {
              "type": "NullLiteral",
              "start": 65,
              "end": 69,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 20
                },
                "end": {
                  "line": 4,
                  "column": 24
                }
              }
            }
          }
        ],
        "kind": "const",
        "leadingComments": [
          {
            "type": "CommentLine",
            "value": " Example test",
            "start": 0,
            "end": 15,
            "loc": {
              "start": {
                "line": 1,
                "column": 0
              },
              "end": {
                "line": 1,
                "column": 15
              }
            }
          },
          {
            "type": "CommentLine",
            "value": " Tests the Math object",
            "start": 17,
            "end": 41,
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 24
              }
            }
          }
        ]
      },
      {
        "type": "VariableDeclaration",
        "start": 72,
        "end": 97,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 25
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 78,
            "end": 96,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 24
              }
            },
            "id": {
              "type": "Identifier",
              "start": 78,
              "end": 89,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 17
                },
                "identifierName": "assert"
              },
              "name": "assert",
              "typeAnnotation": {
                "type": "TSTypeAnnotation",
                "start": 84,
                "end": 89,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 12
                  },
                  "end": {
                    "line": 5,
                    "column": 17
                  }
                },
                "typeAnnotation": {
                  "type": "TSAnyKeyword",
                  "start": 86,
                  "end": 89,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 14
                    },
                    "end": {
                      "line": 5,
                      "column": 17
                    }
                  }
                }
              }
            },
            "init": {
              "type": "NullLiteral",
              "start": 92,
              "end": 96,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 20
                },
                "end": {
                  "line": 5,
                  "column": 24
                }
              }
            }
          }
        ],
        "kind": "const"
      },
      {
        "type": "ExpressionStatement",
        "start": 101,
        "end": 761,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 3
          }
        },
        "expression": {
          "type": "CallExpression",
          "start": 101,
          "end": 760,
          "loc": {
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 2
            }
          },
          "callee": {
            "type": "Identifier",
            "start": 101,
            "end": 109,
            "loc": {
              "start": {
                "line": 7,
                "column": 0
              },
              "end": {
                "line": 7,
                "column": 8
              },
              "identifierName": "describe"
            },
            "name": "describe"
          },
          "arguments": [
            {
              "type": "StringLiteral",
              "start": 110,
              "end": 127,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 9
                },
                "end": {
                  "line": 7,
                  "column": 26
                }
              },
              "extra": {
                "rawValue": "The Math object",
                "raw": "'The Math object'"
              },
              "value": "The Math object"
            },
            {
              "type": "ArrowFunctionExpression",
              "start": 129,
              "end": 759,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 28
                },
                "end": {
                  "line": 37,
                  "column": 1
                }
              },
              "id": null,
              "generator": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "start": 135,
                "end": 759,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 34
                  },
                  "end": {
                    "line": 37,
                    "column": 1
                  }
                },
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 142,
                    "end": 298,
                    "loc": {
                      "start": {
                        "line": 9,
                        "column": 2
                      },
                      "end": {
                        "line": 15,
                        "column": 5
                      }
                    },
                    "expression": {
                      "type": "CallExpression",
                      "start": 142,
                      "end": 297,
                      "loc": {
                        "start": {
                          "line": 9,
                          "column": 2
                        },
                        "end": {
                          "line": 15,
                          "column": 4
                        }
                      },
                      "callee": {
                        "type": "Identifier",
                        "start": 142,
                        "end": 144,
                        "loc": {
                          "start": {
                            "line": 9,
                            "column": 2
                          },
                          "end": {
                            "line": 9,
                            "column": 4
                          },
                          "identifierName": "it"
                        },
                        "name": "it"
                      },
                      "arguments": [
                        {
                          "type": "StringLiteral",
                          "start": 145,
                          "end": 167,
                          "loc": {
                            "start": {
                              "line": 9,
                              "column": 5
                            },
                            "end": {
                              "line": 9,
                              "column": 27
                            }
                          },
                          "extra": {
                            "rawValue": "is not a constructor",
                            "raw": "'is not a constructor'"
                          },
                          "value": "is not a constructor"
                        },
                        {
                          "type": "ArrowFunctionExpression",
                          "start": 169,
                          "end": 296,
                          "loc": {
                            "start": {
                              "line": 9,
                              "column": 29
                            },
                            "end": {
                              "line": 15,
                              "column": 3
                            }
                          },
                          "id": null,
                          "generator": false,
                          "async": false,
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "start": 175,
                            "end": 296,
                            "loc": {
                              "start": {
                                "line": 9,
                                "column": 35
                              },
                              "end": {
                                "line": 15,
                                "column": 3
                              }
                            },
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "start": 182,
                                "end": 256,
                                "loc": {
                                  "start": {
                                    "line": 10,
                                    "column": 4
                                  },
                                  "end": {
                                    "line": 13,
                                    "column": 6
                                  }
                                },
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "start": 188,
                                    "end": 255,
                                    "loc": {
                                      "start": {
                                        "line": 10,
                                        "column": 10
                                      },
                                      "end": {
                                        "line": 13,
                                        "column": 5
                                      }
                                    },
                                    "id": {
                                      "type": "Identifier",
                                      "start": 188,
                                      "end": 198,
                                      "loc": {
                                        "start": {
                                          "line": 10,
                                          "column": 10
                                        },
                                        "end": {
                                          "line": 10,
                                          "column": 20
                                        },
                                        "identifierName": "shouldFail"
                                      },
                                      "name": "shouldFail"
                                    },
                                    "init": {
                                      "type": "ArrowFunctionExpression",
                                      "start": 201,
                                      "end": 255,
                                      "loc": {
                                        "start": {
                                          "line": 10,
                                          "column": 23
                                        },
                                        "end": {
                                          "line": 13,
                                          "column": 5
                                        }
                                      },
                                      "id": null,
                                      "generator": false,
                                      "async": false,
                                      "params": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "start": 207,
                                        "end": 255,
                                        "loc": {
                                          "start": {
                                            "line": 10,
                                            "column": 29
                                          },
                                          "end": {
                                            "line": 13,
                                            "column": 5
                                          }
                                        },
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "start": 237,
                                            "end": 248,
                                            "loc": {
                                              "start": {
                                                "line": 12,
                                                "column": 6
                                              },
                                              "end": {
                                                "line": 12,
                                                "column": 17
                                              }
                                            },
                                            "expression": {
                                              "type": "NewExpression",
                                              "start": 237,
                                              "end": 247,
                                              "loc": {
                                                "start": {
                                                  "line": 12,
                                                  "column": 6
                                                },
                                                "end": {
                                                  "line": 12,
                                                  "column": 16
                                                }
                                              },
                                              "callee": {
                                                "type": "Identifier",
                                                "start": 241,
                                                "end": 245,
                                                "loc": {
                                                  "start": {
                                                    "line": 12,
                                                    "column": 10
                                                  },
                                                  "end": {
                                                    "line": 12,
                                                    "column": 14
                                                  },
                                                  "identifierName": "Math"
                                                },
                                                "name": "Math"
                                              },
                                              "arguments": []
                                            },
                                            "leadingComments": [
                                              {
                                                "type": "CommentLine",
                                                "value": " @ts-ignore",
                                                "start": 216,
                                                "end": 229,
                                                "loc": {
                                                  "start": {
                                                    "line": 11,
                                                    "column": 6
                                                  },
                                                  "end": {
                                                    "line": 11,
                                                    "column": 19
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        ],
                                        "directives": []
                                      }
                                    }
                                  }
                                ],
                                "kind": "const"
                              },
                              {
                                "type": "ExpressionStatement",
                                "start": 262,
                                "end": 291,
                                "loc": {
                                  "start": {
                                    "line": 14,
                                    "column": 4
                                  },
                                  "end": {
                                    "line": 14,
                                    "column": 33
                                  }
                                },
                                "expression": {
                                  "type": "CallExpression",
                                  "start": 262,
                                  "end": 290,
                                  "loc": {
                                    "start": {
                                      "line": 14,
                                      "column": 4
                                    },
                                    "end": {
                                      "line": 14,
                                      "column": 32
                                    }
                                  },
                                  "callee": {
                                    "type": "MemberExpression",
                                    "start": 262,
                                    "end": 288,
                                    "loc": {
                                      "start": {
                                        "line": 14,
                                        "column": 4
                                      },
                                      "end": {
                                        "line": 14,
                                        "column": 30
                                      }
                                    },
                                    "object": {
                                      "type": "CallExpression",
                                      "start": 262,
                                      "end": 280,
                                      "loc": {
                                        "start": {
                                          "line": 14,
                                          "column": 4
                                        },
                                        "end": {
                                          "line": 14,
                                          "column": 22
                                        }
                                      },
                                      "callee": {
                                        "type": "Identifier",
                                        "start": 262,
                                        "end": 268,
                                        "loc": {
                                          "start": {
                                            "line": 14,
                                            "column": 4
                                          },
                                          "end": {
                                            "line": 14,
                                            "column": 10
                                          },
                                          "identifierName": "expect"
                                        },
                                        "name": "expect"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "start": 269,
                                          "end": 279,
                                          "loc": {
                                            "start": {
                                              "line": 14,
                                              "column": 11
                                            },
                                            "end": {
                                              "line": 14,
                                              "column": 21
                                            },
                                            "identifierName": "shouldFail"
                                          },
                                          "name": "shouldFail"
                                        }
                                      ]
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "start": 281,
                                      "end": 288,
                                      "loc": {
                                        "start": {
                                          "line": 14,
                                          "column": 23
                                        },
                                        "end": {
                                          "line": 14,
                                          "column": 30
                                        },
                                        "identifierName": "toThrow"
                                      },
                                      "name": "toThrow"
                                    },
                                    "computed": false
                                  },
                                  "arguments": []
                                }
                              }
                            ],
                            "directives": []
                          }
                        }
                      ]
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 304,
                    "end": 515,
                    "loc": {
                      "start": {
                        "line": 17,
                        "column": 2
                      },
                      "end": {
                        "line": 26,
                        "column": 5
                      }
                    },
                    "expression": {
                      "type": "CallExpression",
                      "start": 304,
                      "end": 514,
                      "loc": {
                        "start": {
                          "line": 17,
                          "column": 2
                        },
                        "end": {
                          "line": 26,
                          "column": 4
                        }
                      },
                      "callee": {
                        "type": "Identifier",
                        "start": 304,
                        "end": 312,
                        "loc": {
                          "start": {
                            "line": 17,
                            "column": 2
                          },
                          "end": {
                            "line": 17,
                            "column": 10
                          },
                          "identifierName": "describe"
                        },
                        "name": "describe"
                      },
                      "arguments": [
                        {
                          "type": "StringLiteral",
                          "start": 313,
                          "end": 316,
                          "loc": {
                            "start": {
                              "line": 17,
                              "column": 11
                            },
                            "end": {
                              "line": 17,
                              "column": 14
                            }
                          },
                          "extra": {
                            "rawValue": "E",
                            "raw": "'E'"
                          },
                          "value": "E"
                        },
                        {
                          "type": "ArrowFunctionExpression",
                          "start": 318,
                          "end": 513,
                          "loc": {
                            "start": {
                              "line": 17,
                              "column": 16
                            },
                            "end": {
                              "line": 26,
                              "column": 3
                            }
                          },
                          "id": null,
                          "generator": false,
                          "async": false,
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "start": 323,
                            "end": 513,
                            "loc": {
                              "start": {
                                "line": 17,
                                "column": 21
                              },
                              "end": {
                                "line": 26,
                                "column": 3
                              }
                            },
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "start": 330,
                                "end": 426,
                                "loc": {
                                  "start": {
                                    "line": 18,
                                    "column": 4
                                  },
                                  "end": {
                                    "line": 21,
                                    "column": 7
                                  }
                                },
                                "expression": {
                                  "type": "CallExpression",
                                  "start": 330,
                                  "end": 425,
                                  "loc": {
                                    "start": {
                                      "line": 18,
                                      "column": 4
                                    },
                                    "end": {
                                      "line": 21,
                                      "column": 6
                                    }
                                  },
                                  "callee": {
                                    "type": "Identifier",
                                    "start": 330,
                                    "end": 332,
                                    "loc": {
                                      "start": {
                                        "line": 18,
                                        "column": 4
                                      },
                                      "end": {
                                        "line": 18,
                                        "column": 6
                                      },
                                      "identifierName": "it"
                                    },
                                    "name": "it"
                                  },
                                  "arguments": [
                                    {
                                      "type": "StringLiteral",
                                      "start": 333,
                                      "end": 346,
                                      "loc": {
                                        "start": {
                                          "line": 18,
                                          "column": 7
                                        },
                                        "end": {
                                          "line": 18,
                                          "column": 20
                                        }
                                      },
                                      "extra": {
                                        "rawValue": "is a number",
                                        "raw": "'is a number'"
                                      },
                                      "value": "is a number"
                                    },
                                    {
                                      "type": "ArrowFunctionExpression",
                                      "start": 348,
                                      "end": 424,
                                      "loc": {
                                        "start": {
                                          "line": 18,
                                          "column": 22
                                        },
                                        "end": {
                                          "line": 21,
                                          "column": 5
                                        }
                                      },
                                      "id": null,
                                      "generator": false,
                                      "async": false,
                                      "params": [
                                        {
                                          "type": "Identifier",
                                          "start": 348,
                                          "end": 352,
                                          "loc": {
                                            "start": {
                                              "line": 18,
                                              "column": 22
                                            },
                                            "end": {
                                              "line": 18,
                                              "column": 26
                                            },
                                            "identifierName": "done"
                                          },
                                          "name": "done"
                                        }
                                      ],
                                      "body": {
                                        "type": "BlockStatement",
                                        "start": 356,
                                        "end": 424,
                                        "loc": {
                                          "start": {
                                            "line": 18,
                                            "column": 30
                                          },
                                          "end": {
                                            "line": 21,
                                            "column": 5
                                          }
                                        },
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "start": 365,
                                            "end": 402,
                                            "loc": {
                                              "start": {
                                                "line": 19,
                                                "column": 6
                                              },
                                              "end": {
                                                "line": 19,
                                                "column": 43
                                              }
                                            },
                                            "expression": {
                                              "type": "CallExpression",
                                              "start": 365,
                                              "end": 401,
                                              "loc": {
                                                "start": {
                                                  "line": 19,
                                                  "column": 6
                                                },
                                                "end": {
                                                  "line": 19,
                                                  "column": 42
                                                }
                                              },
                                              "callee": {
                                                "type": "MemberExpression",
                                                "start": 365,
                                                "end": 391,
                                                "loc": {
                                                  "start": {
                                                    "line": 19,
                                                    "column": 6
                                                  },
                                                  "end": {
                                                    "line": 19,
                                                    "column": 32
                                                  }
                                                },
                                                "object": {
                                                  "type": "CallExpression",
                                                  "start": 365,
                                                  "end": 386,
                                                  "loc": {
                                                    "start": {
                                                      "line": 19,
                                                      "column": 6
                                                    },
                                                    "end": {
                                                      "line": 19,
                                                      "column": 27
                                                    }
                                                  },
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "start": 365,
                                                    "end": 371,
                                                    "loc": {
                                                      "start": {
                                                        "line": 19,
                                                        "column": 6
                                                      },
                                                      "end": {
                                                        "line": 19,
                                                        "column": 12
                                                      },
                                                      "identifierName": "expect"
                                                    },
                                                    "name": "expect"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "UnaryExpression",
                                                      "start": 372,
                                                      "end": 385,
                                                      "loc": {
                                                        "start": {
                                                          "line": 19,
                                                          "column": 13
                                                        },
                                                        "end": {
                                                          "line": 19,
                                                          "column": 26
                                                        }
                                                      },
                                                      "operator": "typeof",
                                                      "prefix": true,
                                                      "argument": {
                                                        "type": "MemberExpression",
                                                        "start": 379,
                                                        "end": 385,
                                                        "loc": {
                                                          "start": {
                                                            "line": 19,
                                                            "column": 20
                                                          },
                                                          "end": {
                                                            "line": 19,
                                                            "column": 26
                                                          }
                                                        },
                                                        "object": {
                                                          "type": "Identifier",
                                                          "start": 379,
                                                          "end": 383,
                                                          "loc": {
                                                            "start": {
                                                              "line": 19,
                                                              "column": 20
                                                            },
                                                            "end": {
                                                              "line": 19,
                                                              "column": 24
                                                            },
                                                            "identifierName": "Math"
                                                          },
                                                          "name": "Math"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "start": 384,
                                                          "end": 385,
                                                          "loc": {
                                                            "start": {
                                                              "line": 19,
                                                              "column": 25
                                                            },
                                                            "end": {
                                                              "line": 19,
                                                              "column": 26
                                                            },
                                                            "identifierName": "E"
                                                          },
                                                          "name": "E"
                                                        },
                                                        "computed": false
                                                      }
                                                    }
                                                  ]
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "start": 387,
                                                  "end": 391,
                                                  "loc": {
                                                    "start": {
                                                      "line": 19,
                                                      "column": 28
                                                    },
                                                    "end": {
                                                      "line": 19,
                                                      "column": 32
                                                    },
                                                    "identifierName": "toBe"
                                                  },
                                                  "name": "toBe"
                                                },
                                                "computed": false
                                              },
                                              "arguments": [
                                                {
                                                  "type": "StringLiteral",
                                                  "start": 392,
                                                  "end": 400,
                                                  "loc": {
                                                    "start": {
                                                      "line": 19,
                                                      "column": 33
                                                    },
                                                    "end": {
                                                      "line": 19,
                                                      "column": 41
                                                    }
                                                  },
                                                  "extra": {
                                                    "rawValue": "number",
                                                    "raw": "'number'"
                                                  },
                                                  "value": "number"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "start": 410,
                                            "end": 417,
                                            "loc": {
                                              "start": {
                                                "line": 20,
                                                "column": 6
                                              },
                                              "end": {
                                                "line": 20,
                                                "column": 13
                                              }
                                            },
                                            "expression": {
                                              "type": "CallExpression",
                                              "start": 410,
                                              "end": 416,
                                              "loc": {
                                                "start": {
                                                  "line": 20,
                                                  "column": 6
                                                },
                                                "end": {
                                                  "line": 20,
                                                  "column": 12
                                                }
                                              },
                                              "callee": {
                                                "type": "Identifier",
                                                "start": 410,
                                                "end": 414,
                                                "loc": {
                                                  "start": {
                                                    "line": 20,
                                                    "column": 6
                                                  },
                                                  "end": {
                                                    "line": 20,
                                                    "column": 10
                                                  },
                                                  "identifierName": "done"
                                                },
                                                "name": "done"
                                              },
                                              "arguments": []
                                            }
                                          }
                                        ],
                                        "directives": []
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "start": 434,
                                "end": 508,
                                "loc": {
                                  "start": {
                                    "line": 23,
                                    "column": 4
                                  },
                                  "end": {
                                    "line": 25,
                                    "column": 7
                                  }
                                },
                                "expression": {
                                  "type": "CallExpression",
                                  "start": 434,
                                  "end": 507,
                                  "loc": {
                                    "start": {
                                      "line": 23,
                                      "column": 4
                                    },
                                    "end": {
                                      "line": 25,
                                      "column": 6
                                    }
                                  },
                                  "callee": {
                                    "type": "Identifier",
                                    "start": 434,
                                    "end": 436,
                                    "loc": {
                                      "start": {
                                        "line": 23,
                                        "column": 4
                                      },
                                      "end": {
                                        "line": 23,
                                        "column": 6
                                      },
                                      "identifierName": "it"
                                    },
                                    "name": "it"
                                  },
                                  "arguments": [
                                    {
                                      "type": "StringLiteral",
                                      "start": 437,
                                      "end": 450,
                                      "loc": {
                                        "start": {
                                          "line": 23,
                                          "column": 7
                                        },
                                        "end": {
                                          "line": 23,
                                          "column": 20
                                        }
                                      },
                                      "extra": {
                                        "rawValue": "is positive",
                                        "raw": "'is positive'"
                                      },
                                      "value": "is positive"
                                    },
                                    {
                                      "type": "ArrowFunctionExpression",
                                      "start": 452,
                                      "end": 506,
                                      "loc": {
                                        "start": {
                                          "line": 23,
                                          "column": 22
                                        },
                                        "end": {
                                          "line": 25,
                                          "column": 5
                                        }
                                      },
                                      "id": null,
                                      "generator": false,
                                      "async": false,
                                      "params": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "start": 458,
                                        "end": 506,
                                        "loc": {
                                          "start": {
                                            "line": 23,
                                            "column": 28
                                          },
                                          "end": {
                                            "line": 25,
                                            "column": 5
                                          }
                                        },
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "start": 467,
                                            "end": 499,
                                            "loc": {
                                              "start": {
                                                "line": 24,
                                                "column": 6
                                              },
                                              "end": {
                                                "line": 24,
                                                "column": 38
                                              }
                                            },
                                            "expression": {
                                              "type": "CallExpression",
                                              "start": 467,
                                              "end": 498,
                                              "loc": {
                                                "start": {
                                                  "line": 24,
                                                  "column": 6
                                                },
                                                "end": {
                                                  "line": 24,
                                                  "column": 37
                                                }
                                              },
                                              "callee": {
                                                "type": "MemberExpression",
                                                "start": 467,
                                                "end": 496,
                                                "loc": {
                                                  "start": {
                                                    "line": 24,
                                                    "column": 6
                                                  },
                                                  "end": {
                                                    "line": 24,
                                                    "column": 35
                                                  }
                                                },
                                                "object": {
                                                  "type": "CallExpression",
                                                  "start": 467,
                                                  "end": 485,
                                                  "loc": {
                                                    "start": {
                                                      "line": 24,
                                                      "column": 6
                                                    },
                                                    "end": {
                                                      "line": 24,
                                                      "column": 24
                                                    }
                                                  },
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "start": 467,
                                                    "end": 473,
                                                    "loc": {
                                                      "start": {
                                                        "line": 24,
                                                        "column": 6
                                                      },
                                                      "end": {
                                                        "line": 24,
                                                        "column": 12
                                                      },
                                                      "identifierName": "expect"
                                                    },
                                                    "name": "expect"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "start": 474,
                                                      "end": 484,
                                                      "loc": {
                                                        "start": {
                                                          "line": 24,
                                                          "column": 13
                                                        },
                                                        "end": {
                                                          "line": 24,
                                                          "column": 23
                                                        }
                                                      },
                                                      "left": {
                                                        "type": "MemberExpression",
                                                        "start": 474,
                                                        "end": 480,
                                                        "loc": {
                                                          "start": {
                                                            "line": 24,
                                                            "column": 13
                                                          },
                                                          "end": {
                                                            "line": 24,
                                                            "column": 19
                                                          }
                                                        },
                                                        "object": {
                                                          "type": "Identifier",
                                                          "start": 474,
                                                          "end": 478,
                                                          "loc": {
                                                            "start": {
                                                              "line": 24,
                                                              "column": 13
                                                            },
                                                            "end": {
                                                              "line": 24,
                                                              "column": 17
                                                            },
                                                            "identifierName": "Math"
                                                          },
                                                          "name": "Math"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "start": 479,
                                                          "end": 480,
                                                          "loc": {
                                                            "start": {
                                                              "line": 24,
                                                              "column": 18
                                                            },
                                                            "end": {
                                                              "line": 24,
                                                              "column": 19
                                                            },
                                                            "identifierName": "E"
                                                          },
                                                          "name": "E"
                                                        },
                                                        "computed": false
                                                      },
                                                      "operator": ">",
                                                      "right": {
                                                        "type": "NumericLiteral",
                                                        "start": 483,
                                                        "end": 484,
                                                        "loc": {
                                                          "start": {
                                                            "line": 24,
                                                            "column": 22
                                                          },
                                                          "end": {
                                                            "line": 24,
                                                            "column": 23
                                                          }
                                                        },
                                                        "extra": {
                                                          "rawValue": 0,
                                                          "raw": "0"
                                                        },
                                                        "value": 0
                                                      }
                                                    }
                                                  ]
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "start": 486,
                                                  "end": 496,
                                                  "loc": {
                                                    "start": {
                                                      "line": 24,
                                                      "column": 25
                                                    },
                                                    "end": {
                                                      "line": 24,
                                                      "column": 35
                                                    },
                                                    "identifierName": "toBeTruthy"
                                                  },
                                                  "name": "toBeTruthy"
                                                },
                                                "computed": false
                                              },
                                              "arguments": []
                                            }
                                          }
                                        ],
                                        "directives": []
                                      }
                                    }
                                  ]
                                }
                              }
                            ],
                            "directives": []
                          }
                        }
                      ]
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "start": 521,
                    "end": 756,
                    "loc": {
                      "start": {
                        "line": 28,
                        "column": 2
                      },
                      "end": {
                        "line": 36,
                        "column": 5
                      }
                    },
                    "expression": {
                      "type": "CallExpression",
                      "start": 521,
                      "end": 755,
                      "loc": {
                        "start": {
                          "line": 28,
                          "column": 2
                        },
                        "end": {
                          "line": 36,
                          "column": 4
                        }
                      },
                      "callee": {
                        "type": "Identifier",
                        "start": 521,
                        "end": 529,
                        "loc": {
                          "start": {
                            "line": 28,
                            "column": 2
                          },
                          "end": {
                            "line": 28,
                            "column": 10
                          },
                          "identifierName": "describe"
                        },
                        "name": "describe"
                      },
                      "arguments": [
                        {
                          "type": "StringLiteral",
                          "start": 530,
                          "end": 535,
                          "loc": {
                            "start": {
                              "line": 28,
                              "column": 11
                            },
                            "end": {
                              "line": 28,
                              "column": 16
                            }
                          },
                          "extra": {
                            "rawValue": "Max",
                            "raw": "'Max'"
                          },
                          "value": "Max"
                        },
                        {
                          "type": "ArrowFunctionExpression",
                          "start": 537,
                          "end": 754,
                          "loc": {
                            "start": {
                              "line": 28,
                              "column": 18
                            },
                            "end": {
                              "line": 36,
                              "column": 3
                            }
                          },
                          "id": null,
                          "generator": false,
                          "async": false,
                          "params": [],
                          "body": {
                            "type": "BlockStatement",
                            "start": 543,
                            "end": 754,
                            "loc": {
                              "start": {
                                "line": 28,
                                "column": 24
                              },
                              "end": {
                                "line": 36,
                                "column": 3
                              }
                            },
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "start": 550,
                                "end": 749,
                                "loc": {
                                  "start": {
                                    "line": 29,
                                    "column": 4
                                  },
                                  "end": {
                                    "line": 35,
                                    "column": 7
                                  }
                                },
                                "expression": {
                                  "type": "CallExpression",
                                  "start": 550,
                                  "end": 748,
                                  "loc": {
                                    "start": {
                                      "line": 29,
                                      "column": 4
                                    },
                                    "end": {
                                      "line": 35,
                                      "column": 6
                                    }
                                  },
                                  "callee": {
                                    "type": "Identifier",
                                    "start": 550,
                                    "end": 558,
                                    "loc": {
                                      "start": {
                                        "line": 29,
                                        "column": 4
                                      },
                                      "end": {
                                        "line": 29,
                                        "column": 12
                                      },
                                      "identifierName": "describe"
                                    },
                                    "name": "describe"
                                  },
                                  "arguments": [
                                    {
                                      "type": "StringLiteral",
                                      "start": 559,
                                      "end": 578,
                                      "loc": {
                                        "start": {
                                          "line": 29,
                                          "column": 13
                                        },
                                        "end": {
                                          "line": 29,
                                          "column": 32
                                        }
                                      },
                                      "extra": {
                                        "rawValue": "with correct args",
                                        "raw": "'with correct args'"
                                      },
                                      "value": "with correct args"
                                    },
                                    {
                                      "type": "ArrowFunctionExpression",
                                      "start": 580,
                                      "end": 747,
                                      "loc": {
                                        "start": {
                                          "line": 29,
                                          "column": 34
                                        },
                                        "end": {
                                          "line": 35,
                                          "column": 5
                                        }
                                      },
                                      "id": null,
                                      "generator": false,
                                      "async": false,
                                      "params": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "start": 586,
                                        "end": 747,
                                        "loc": {
                                          "start": {
                                            "line": 29,
                                            "column": 40
                                          },
                                          "end": {
                                            "line": 35,
                                            "column": 5
                                          }
                                        },
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "start": 595,
                                            "end": 740,
                                            "loc": {
                                              "start": {
                                                "line": 30,
                                                "column": 6
                                              },
                                              "end": {
                                                "line": 34,
                                                "column": 9
                                              }
                                            },
                                            "expression": {
                                              "type": "CallExpression",
                                              "start": 595,
                                              "end": 739,
                                              "loc": {
                                                "start": {
                                                  "line": 30,
                                                  "column": 6
                                                },
                                                "end": {
                                                  "line": 34,
                                                  "column": 8
                                                }
                                              },
                                              "callee": {
                                                "type": "Identifier",
                                                "start": 595,
                                                "end": 597,
                                                "loc": {
                                                  "start": {
                                                    "line": 30,
                                                    "column": 6
                                                  },
                                                  "end": {
                                                    "line": 30,
                                                    "column": 8
                                                  },
                                                  "identifierName": "it"
                                                },
                                                "name": "it"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "StringLiteral",
                                                  "start": 598,
                                                  "end": 619,
                                                  "loc": {
                                                    "start": {
                                                      "line": 30,
                                                      "column": 9
                                                    },
                                                    "end": {
                                                      "line": 30,
                                                      "column": 30
                                                    }
                                                  },
                                                  "extra": {
                                                    "rawValue": "returns the greater",
                                                    "raw": "'returns the greater'"
                                                  },
                                                  "value": "returns the greater"
                                                },
                                                {
                                                  "type": "ArrowFunctionExpression",
                                                  "start": 621,
                                                  "end": 738,
                                                  "loc": {
                                                    "start": {
                                                      "line": 30,
                                                      "column": 32
                                                    },
                                                    "end": {
                                                      "line": 34,
                                                      "column": 7
                                                    }
                                                  },
                                                  "id": null,
                                                  "generator": false,
                                                  "async": false,
                                                  "params": [],
                                                  "body": {
                                                    "type": "BlockStatement",
                                                    "start": 626,
                                                    "end": 738,
                                                    "loc": {
                                                      "start": {
                                                        "line": 30,
                                                        "column": 37
                                                      },
                                                      "end": {
                                                        "line": 34,
                                                        "column": 7
                                                      }
                                                    },
                                                    "body": [
                                                      {
                                                        "type": "VariableDeclaration",
                                                        "start": 637,
                                                        "end": 662,
                                                        "loc": {
                                                          "start": {
                                                            "line": 31,
                                                            "column": 8
                                                          },
                                                          "end": {
                                                            "line": 31,
                                                            "column": 33
                                                          }
                                                        },
                                                        "declarations": [
                                                          {
                                                            "type": "VariableDeclarator",
                                                            "start": 643,
                                                            "end": 661,
                                                            "loc": {
                                                              "start": {
                                                                "line": 31,
                                                                "column": 14
                                                              },
                                                              "end": {
                                                                "line": 31,
                                                                "column": 32
                                                              }
                                                            },
                                                            "id": {
                                                              "type": "Identifier",
                                                              "start": 643,
                                                              "end": 644,
                                                              "loc": {
                                                                "start": {
                                                                  "line": 31,
                                                                  "column": 14
                                                                },
                                                                "end": {
                                                                  "line": 31,
                                                                  "column": 15
                                                                },
                                                                "identifierName": "x"
                                                              },
                                                              "name": "x"
                                                            },
                                                            "init": {
                                                              "type": "CallExpression",
                                                              "start": 647,
                                                              "end": 661,
                                                              "loc": {
                                                                "start": {
                                                                  "line": 31,
                                                                  "column": 18
                                                                },
                                                                "end": {
                                                                  "line": 31,
                                                                  "column": 32
                                                                }
                                                              },
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "start": 647,
                                                                "end": 655,
                                                                "loc": {
                                                                  "start": {
                                                                    "line": 31,
                                                                    "column": 18
                                                                  },
                                                                  "end": {
                                                                    "line": 31,
                                                                    "column": 26
                                                                  }
                                                                },
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "start": 647,
                                                                  "end": 651,
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 31,
                                                                      "column": 18
                                                                    },
                                                                    "end": {
                                                                      "line": 31,
                                                                      "column": 22
                                                                    },
                                                                    "identifierName": "Math"
                                                                  },
                                                                  "name": "Math"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "start": 652,
                                                                  "end": 655,
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 31,
                                                                      "column": 23
                                                                    },
                                                                    "end": {
                                                                      "line": 31,
                                                                      "column": 26
                                                                    },
                                                                    "identifierName": "max"
                                                                  },
                                                                  "name": "max"
                                                                },
                                                                "computed": false
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "NumericLiteral",
                                                                  "start": 656,
                                                                  "end": 657,
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 31,
                                                                      "column": 27
                                                                    },
                                                                    "end": {
                                                                      "line": 31,
                                                                      "column": 28
                                                                    }
                                                                  },
                                                                  "extra": {
                                                                    "rawValue": 1,
                                                                    "raw": "1"
                                                                  },
                                                                  "value": 1
                                                                },
                                                                {
                                                                  "type": "NumericLiteral",
                                                                  "start": 659,
                                                                  "end": 660,
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 31,
                                                                      "column": 30
                                                                    },
                                                                    "end": {
                                                                      "line": 31,
                                                                      "column": 31
                                                                    }
                                                                  },
                                                                  "extra": {
                                                                    "rawValue": 2,
                                                                    "raw": "2"
                                                                  },
                                                                  "value": 2
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ],
                                                        "kind": "const"
                                                      },
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "start": 672,
                                                        "end": 701,
                                                        "loc": {
                                                          "start": {
                                                            "line": 32,
                                                            "column": 8
                                                          },
                                                          "end": {
                                                            "line": 32,
                                                            "column": 37
                                                          }
                                                        },
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "start": 672,
                                                          "end": 700,
                                                          "loc": {
                                                            "start": {
                                                              "line": 32,
                                                              "column": 8
                                                            },
                                                            "end": {
                                                              "line": 32,
                                                              "column": 36
                                                            }
                                                          },
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "start": 672,
                                                            "end": 694,
                                                            "loc": {
                                                              "start": {
                                                                "line": 32,
                                                                "column": 8
                                                              },
                                                              "end": {
                                                                "line": 32,
                                                                "column": 30
                                                              }
                                                            },
                                                            "object": {
                                                              "type": "Identifier",
                                                              "start": 672,
                                                              "end": 678,
                                                              "loc": {
                                                                "start": {
                                                                  "line": 32,
                                                                  "column": 8
                                                                },
                                                                "end": {
                                                                  "line": 32,
                                                                  "column": 14
                                                                },
                                                                "identifierName": "assert"
                                                              },
                                                              "name": "assert"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "start": 679,
                                                              "end": 694,
                                                              "loc": {
                                                                "start": {
                                                                  "line": 32,
                                                                  "column": 15
                                                                },
                                                                "end": {
                                                                  "line": 32,
                                                                  "column": 30
                                                                },
                                                                "identifierName": "strictDeepEqual"
                                                              },
                                                              "name": "strictDeepEqual"
                                                            },
                                                            "computed": false
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "start": 695,
                                                              "end": 696,
                                                              "loc": {
                                                                "start": {
                                                                  "line": 32,
                                                                  "column": 31
                                                                },
                                                                "end": {
                                                                  "line": 32,
                                                                  "column": 32
                                                                },
                                                                "identifierName": "x"
                                                              },
                                                              "name": "x"
                                                            },
                                                            {
                                                              "type": "NumericLiteral",
                                                              "start": 698,
                                                              "end": 699,
                                                              "loc": {
                                                                "start": {
                                                                  "line": 32,
                                                                  "column": 34
                                                                },
                                                                "end": {
                                                                  "line": 32,
                                                                  "column": 35
                                                                }
                                                              },
                                                              "extra": {
                                                                "rawValue": 2,
                                                                "raw": "2"
                                                              },
                                                              "value": 2
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "start": 711,
                                                        "end": 729,
                                                        "loc": {
                                                          "start": {
                                                            "line": 33,
                                                            "column": 8
                                                          },
                                                          "end": {
                                                            "line": 33,
                                                            "column": 26
                                                          }
                                                        },
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "start": 711,
                                                          "end": 728,
                                                          "loc": {
                                                            "start": {
                                                              "line": 33,
                                                              "column": 8
                                                            },
                                                            "end": {
                                                              "line": 33,
                                                              "column": 25
                                                            }
                                                          },
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "start": 711,
                                                            "end": 725,
                                                            "loc": {
                                                              "start": {
                                                                "line": 33,
                                                                "column": 8
                                                              },
                                                              "end": {
                                                                "line": 33,
                                                                "column": 22
                                                              }
                                                            },
                                                            "object": {
                                                              "type": "CallExpression",
                                                              "start": 711,
                                                              "end": 720,
                                                              "loc": {
                                                                "start": {
                                                                  "line": 33,
                                                                  "column": 8
                                                                },
                                                                "end": {
                                                                  "line": 33,
                                                                  "column": 17
                                                                }
                                                              },
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "start": 711,
                                                                "end": 717,
                                                                "loc": {
                                                                  "start": {
                                                                    "line": 33,
                                                                    "column": 8
                                                                  },
                                                                  "end": {
                                                                    "line": 33,
                                                                    "column": 14
                                                                  },
                                                                  "identifierName": "expect"
                                                                },
                                                                "name": "expect"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "start": 718,
                                                                  "end": 719,
                                                                  "loc": {
                                                                    "start": {
                                                                      "line": 33,
                                                                      "column": 15
                                                                    },
                                                                    "end": {
                                                                      "line": 33,
                                                                      "column": 16
                                                                    },
                                                                    "identifierName": "x"
                                                                  },
                                                                  "name": "x"
                                                                }
                                                              ]
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "start": 721,
                                                              "end": 725,
                                                              "loc": {
                                                                "start": {
                                                                  "line": 33,
                                                                  "column": 18
                                                                },
                                                                "end": {
                                                                  "line": 33,
                                                                  "column": 22
                                                                },
                                                                "identifierName": "toBe"
                                                              },
                                                              "name": "toBe"
                                                            },
                                                            "computed": false
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "NumericLiteral",
                                                              "start": 726,
                                                              "end": 727,
                                                              "loc": {
                                                                "start": {
                                                                  "line": 33,
                                                                  "column": 23
                                                                },
                                                                "end": {
                                                                  "line": 33,
                                                                  "column": 24
                                                                }
                                                              },
                                                              "extra": {
                                                                "rawValue": 2,
                                                                "raw": "2"
                                                              },
                                                              "value": 2
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ],
                                                    "directives": []
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "directives": []
                                      }
                                    }
                                  ]
                                }
                              }
                            ],
                            "directives": []
                          }
                        }
                      ]
                    }
                  }
                ],
                "directives": []
              }
            }
          ]
        }
      },
      {
        "type": "ExpressionStatement",
        "start": 765,
        "end": 832,
        "loc": {
          "start": {
            "line": 39,
            "column": 0
          },
          "end": {
            "line": 41,
            "column": 3
          }
        },
        "expression": {
          "type": "CallExpression",
          "start": 765,
          "end": 831,
          "loc": {
            "start": {
              "line": 39,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 2
            }
          },
          "callee": {
            "type": "Identifier",
            "start": 765,
            "end": 767,
            "loc": {
              "start": {
                "line": 39,
                "column": 0
              },
              "end": {
                "line": 39,
                "column": 2
              },
              "identifierName": "it"
            },
            "name": "it"
          },
          "arguments": [
            {
              "type": "StringLiteral",
              "start": 768,
              "end": 789,
              "loc": {
                "start": {
                  "line": 39,
                  "column": 3
                },
                "end": {
                  "line": 39,
                  "column": 24
                }
              },
              "extra": {
                "rawValue": "is an orphaned test",
                "raw": "'is an orphaned test'"
              },
              "value": "is an orphaned test"
            },
            {
              "type": "ArrowFunctionExpression",
              "start": 791,
              "end": 830,
              "loc": {
                "start": {
                  "line": 39,
                  "column": 26
                },
                "end": {
                  "line": 41,
                  "column": 1
                }
              },
              "id": null,
              "generator": false,
              "async": false,
              "params": [],
              "body": {
                "type": "BlockStatement",
                "start": 797,
                "end": 830,
                "loc": {
                  "start": {
                    "line": 39,
                    "column": 32
                  },
                  "end": {
                    "line": 41,
                    "column": 1
                  }
                },
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "start": 802,
                    "end": 827,
                    "loc": {
                      "start": {
                        "line": 40,
                        "column": 2
                      },
                      "end": {
                        "line": 40,
                        "column": 27
                      }
                    },
                    "expression": {
                      "type": "CallExpression",
                      "start": 802,
                      "end": 826,
                      "loc": {
                        "start": {
                          "line": 40,
                          "column": 2
                        },
                        "end": {
                          "line": 40,
                          "column": 26
                        }
                      },
                      "callee": {
                        "type": "TSAsExpression",
                        "start": 803,
                        "end": 819,
                        "loc": {
                          "start": {
                            "line": 40,
                            "column": 3
                          },
                          "end": {
                            "line": 40,
                            "column": 19
                          }
                        },
                        "expression": {
                          "type": "MemberExpression",
                          "start": 803,
                          "end": 812,
                          "loc": {
                            "start": {
                              "line": 40,
                              "column": 3
                            },
                            "end": {
                              "line": 40,
                              "column": 12
                            }
                          },
                          "object": {
                            "type": "Identifier",
                            "start": 803,
                            "end": 809,
                            "loc": {
                              "start": {
                                "line": 40,
                                "column": 3
                              },
                              "end": {
                                "line": 40,
                                "column": 9
                              },
                              "identifierName": "assert"
                            },
                            "name": "assert"
                          },
                          "property": {
                            "type": "Identifier",
                            "start": 810,
                            "end": 812,
                            "loc": {
                              "start": {
                                "line": 40,
                                "column": 10
                              },
                              "end": {
                                "line": 40,
                                "column": 12
                              },
                              "identifierName": "ok"
                            },
                            "name": "ok"
                          },
                          "computed": false
                        },
                        "typeAnnotation": {
                          "type": "TSAnyKeyword",
                          "start": 816,
                          "end": 819,
                          "loc": {
                            "start": {
                              "line": 40,
                              "column": 16
                            },
                            "end": {
                              "line": 40,
                              "column": 19
                            }
                          }
                        },
                        "extra": {
                          "parenthesized": true,
                          "parenStart": 802
                        }
                      },
                      "arguments": [
                        {
                          "type": "BooleanLiteral",
                          "start": 821,
                          "end": 825,
                          "loc": {
                            "start": {
                              "line": 40,
                              "column": 21
                            },
                            "end": {
                              "line": 40,
                              "column": 25
                            }
                          },
                          "value": true
                        }
                      ]
                    }
                  }
                ],
                "directives": []
              }
            }
          ]
        },
        "trailingComments": [
          {
            "type": "CommentLine",
            "value": " file",
            "start": 836,
            "end": 843,
            "loc": {
              "start": {
                "line": 43,
                "column": 0
              },
              "end": {
                "line": 43,
                "column": 7
              }
            }
          },
          {
            "type": "CommentLine",
            "value": "  program",
            "start": 845,
            "end": 856,
            "loc": {
              "start": {
                "line": 44,
                "column": 0
              },
              "end": {
                "line": 44,
                "column": 11
              }
            }
          },
          {
            "type": "CommentLine",
            "value": "    body",
            "start": 858,
            "end": 868,
            "loc": {
              "start": {
                "line": 45,
                "column": 0
              },
              "end": {
                "line": 45,
                "column": 10
              }
            }
          },
          {
            "type": "CommentLine",
            "value": "      type expressionStatement",
            "start": 870,
            "end": 902,
            "loc": {
              "start": {
                "line": 46,
                "column": 0
              },
              "end": {
                "line": 46,
                "column": 32
              }
            }
          },
          {
            "type": "CommentLine",
            "value": "        expression type callexpression",
            "start": 904,
            "end": 944,
            "loc": {
              "start": {
                "line": 47,
                "column": 0
              },
              "end": {
                "line": 47,
                "column": 40
              }
            }
          },
          {
            "type": "CommentLine",
            "value": "          callee name describe",
            "start": 946,
            "end": 978,
            "loc": {
              "start": {
                "line": 48,
                "column": 0
              },
              "end": {
                "line": 48,
                "column": 32
              }
            }
          },
          {
            "type": "CommentLine",
            "value": "",
            "start": 980,
            "end": 982,
            "loc": {
              "start": {
                "line": 49,
                "column": 0
              },
              "end": {
                "line": 49,
                "column": 2
              }
            }
          },
          {
            "type": "CommentLine",
            "value": "        again, type expressionstatement",
            "start": 984,
            "end": 1025,
            "loc": {
              "start": {
                "line": 50,
                "column": 0
              },
              "end": {
                "line": 50,
                "column": 41
              }
            }
          },
          {
            "type": "CommentLine",
            "value": "          callee name 'it', 'describe'",
            "start": 1027,
            "end": 1067,
            "loc": {
              "start": {
                "line": 51,
                "column": 0
              },
              "end": {
                "line": 51,
                "column": 40
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentLine",
      "value": " Example test",
      "start": 0,
      "end": 15,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 15
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Tests the Math object",
      "start": 17,
      "end": 41,
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 24
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " @ts-ignore",
      "start": 216,
      "end": 229,
      "loc": {
        "start": {
          "line": 11,
          "column": 6
        },
        "end": {
          "line": 11,
          "column": 19
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " file",
      "start": 836,
      "end": 843,
      "loc": {
        "start": {
          "line": 43,
          "column": 0
        },
        "end": {
          "line": 43,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": "  program",
      "start": 845,
      "end": 856,
      "loc": {
        "start": {
          "line": 44,
          "column": 0
        },
        "end": {
          "line": 44,
          "column": 11
        }
      }
    },
    {
      "type": "CommentLine",
      "value": "    body",
      "start": 858,
      "end": 868,
      "loc": {
        "start": {
          "line": 45,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 10
        }
      }
    },
    {
      "type": "CommentLine",
      "value": "      type expressionStatement",
      "start": 870,
      "end": 902,
      "loc": {
        "start": {
          "line": 46,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 32
        }
      }
    },
    {
      "type": "CommentLine",
      "value": "        expression type callexpression",
      "start": 904,
      "end": 944,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 47,
          "column": 40
        }
      }
    },
    {
      "type": "CommentLine",
      "value": "          callee name describe",
      "start": 946,
      "end": 978,
      "loc": {
        "start": {
          "line": 48,
          "column": 0
        },
        "end": {
          "line": 48,
          "column": 32
        }
      }
    },
    {
      "type": "CommentLine",
      "value": "",
      "start": 980,
      "end": 982,
      "loc": {
        "start": {
          "line": 49,
          "column": 0
        },
        "end": {
          "line": 49,
          "column": 2
        }
      }
    },
    {
      "type": "CommentLine",
      "value": "        again, type expressionstatement",
      "start": 984,
      "end": 1025,
      "loc": {
        "start": {
          "line": 50,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 41
        }
      }
    },
    {
      "type": "CommentLine",
      "value": "          callee name 'it', 'describe'",
      "start": 1027,
      "end": 1067,
      "loc": {
        "start": {
          "line": 51,
          "column": 0
        },
        "end": {
          "line": 51,
          "column": 40
        }
      }
    }
  ]
}

an expression statement
NodePath {
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},

  context:
   TraversalContext {
     queue: [ [NodePath], [NodePath], [Circular], [NodePath] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: {},
        data: {},
        crawling: false },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'VariableDeclaration',
       start: 45,
       end: 70,
       loc: [SourceLocation],
       declarations: [Array],
       kind: 'const',
       leadingComments: [Array] },
     Node {
       type: 'VariableDeclaration',
       start: 72,
       end: 97,
       loc: [SourceLocation],
       declarations: [Array],
       kind: 'const' },
     Node {
       type: 'ExpressionStatement',
       start: 101,
       end: 761,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 765,
       end: 832,
       loc: [SourceLocation],
       expression: [Node],
       trailingComments: [Array] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 2,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 101,
     end: 761,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 101,
        end: 760,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 0,
     block:
      Node {
        type: 'Program',
        start: 0,
        end: 1069,
        loc: [SourceLocation],
        sourceType: 'script',
        interpreter: null,
        body: [Array],
        directives: [] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Circular],
        type: 'Program',
        typeAnnotation: null },
     labels: Map {},
     references:
      { expect: true,
        assert: true,
        shouldFail: true,
        done: true,
        x: true },
     bindings: { expect: [Binding], assert: [Binding] },
     globals: { describe: [Node], it: [Node], Math: [Node] },
     uids: {},
     data: {},
     crawling: false },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 135,
     end: 759,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node], [Node], [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 129,
        end: 759,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 129,
        end: 759,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 135,
        end: 759,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 1,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular], [NodePath], [NodePath] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 1,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 142,
       end: 298,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 304,
       end: 515,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 521,
       end: 756,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 0,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 142,
     end: 298,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 142,
        end: 297,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 1,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 129,
        end: 759,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: {},
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 207,
     end: 255,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 201,
        end: 255,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'init',
        key: 'init',
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 201,
        end: 255,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 207,
        end: 255,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 3,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 3,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 237,
       end: 248,
       loc: [SourceLocation],
       expression: [Node],
       leadingComments: [Array] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 0,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 237,
     end: 248,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'NewExpression',
        start: 237,
        end: 247,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [] },
     leadingComments: [ [Object] ] },
  scope:
   Scope {
     uid: 3,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 201,
        end: 255,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'init',
        key: 'init',
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: {},
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 175,
     end: 296,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node], [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 169,
        end: 296,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 169,
        end: 296,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 175,
        end: 296,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 2,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [NodePath], [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 2,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'VariableDeclaration',
       start: 182,
       end: 256,
       loc: [SourceLocation],
       declarations: [Array],
       kind: 'const' },
     Node {
       type: 'ExpressionStatement',
       start: 262,
       end: 291,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 1,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 262,
     end: 291,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 262,
        end: 290,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [] } },
  scope:
   Scope {
     uid: 2,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 169,
        end: 296,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: { shouldFail: [Binding] },
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 135,
     end: 759,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node], [Node], [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 129,
        end: 759,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 129,
        end: 759,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 135,
        end: 759,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 1,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [NodePath], [Circular], [NodePath] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 1,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 142,
       end: 298,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 304,
       end: 515,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 521,
       end: 756,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 1,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 304,
     end: 515,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 304,
        end: 514,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 1,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 129,
        end: 759,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: {},
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 323,
     end: 513,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node], [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 318,
        end: 513,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 318,
        end: 513,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 323,
        end: 513,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 4,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular], [NodePath] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 4,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 330,
       end: 426,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 434,
       end: 508,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 0,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 330,
     end: 426,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 330,
        end: 425,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 4,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 318,
        end: 513,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: {},
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 356,
     end: 424,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node], [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 348,
        end: 424,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [Array],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 348,
        end: 424,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [Array],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 356,
        end: 424,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 5,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular], [NodePath] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 5,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 365,
       end: 402,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 410,
       end: 417,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 0,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 365,
     end: 402,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 365,
        end: 401,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 5,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 348,
        end: 424,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [Array],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: { done: [Binding] },
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 356,
     end: 424,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node], [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 348,
        end: 424,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [Array],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 348,
        end: 424,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [Array],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 356,
        end: 424,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 5,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [NodePath], [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 5,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 365,
       end: 402,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 410,
       end: 417,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 1,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 410,
     end: 417,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 410,
        end: 416,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [] } },
  scope:
   Scope {
     uid: 5,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 348,
        end: 424,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [Array],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: { done: [Binding] },
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 323,
     end: 513,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node], [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 318,
        end: 513,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 318,
        end: 513,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 323,
        end: 513,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 4,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [NodePath], [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 4,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 330,
       end: 426,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 434,
       end: 508,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 1,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 434,
     end: 508,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 434,
        end: 507,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 4,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 318,
        end: 513,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: {},
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 458,
     end: 506,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 452,
        end: 506,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 452,
        end: 506,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 458,
        end: 506,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 6,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 6,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 467,
       end: 499,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 0,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 467,
     end: 499,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 467,
        end: 498,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [] } },
  scope:
   Scope {
     uid: 6,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 452,
        end: 506,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: {},
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 135,
     end: 759,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node], [Node], [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 129,
        end: 759,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 129,
        end: 759,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 135,
        end: 759,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 1,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [NodePath], [NodePath], [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 1,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 142,
       end: 298,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 304,
       end: 515,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 521,
       end: 756,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 2,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 521,
     end: 756,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 521,
        end: 755,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 1,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 129,
        end: 759,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: {},
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 543,
     end: 754,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 537,
        end: 754,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 537,
        end: 754,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 543,
        end: 754,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 7,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 7,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 550,
       end: 749,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 0,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 550,
     end: 749,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 550,
        end: 748,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 7,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 537,
        end: 754,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: {},
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 586,
     end: 747,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 580,
        end: 747,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 580,
        end: 747,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 586,
        end: 747,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 8,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 8,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 595,
       end: 740,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 0,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 595,
     end: 740,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 595,
        end: 739,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 8,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 580,
        end: 747,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: {},
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 626,
     end: 738,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node], [Node], [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 621,
        end: 738,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 621,
        end: 738,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 626,
        end: 738,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 9,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [NodePath], [Circular], [NodePath] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 9,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'VariableDeclaration',
       start: 637,
       end: 662,
       loc: [SourceLocation],
       declarations: [Array],
       kind: 'const' },
     Node {
       type: 'ExpressionStatement',
       start: 672,
       end: 701,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 711,
       end: 729,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 1,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 672,
     end: 701,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 672,
        end: 700,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 9,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 621,
        end: 738,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: { x: [Binding] },
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 626,
     end: 738,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node], [Node], [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 621,
        end: 738,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 621,
        end: 738,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 626,
        end: 738,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 9,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [NodePath], [NodePath], [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 9,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'VariableDeclaration',
       start: 637,
       end: 662,
       loc: [SourceLocation],
       declarations: [Array],
       kind: 'const' },
     Node {
       type: 'ExpressionStatement',
       start: 672,
       end: 701,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 711,
       end: 729,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 2,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 711,
     end: 729,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 711,
        end: 728,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 9,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 621,
        end: 738,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: { x: [Binding] },
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'Program',
     start: 0,
     end: 1069,
     loc: SourceLocation { start: [Position], end: [Position] },
     sourceType: 'script',
     interpreter: null,
     body: [ [Node], [Node], [Node], [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'File',
        start: 0,
        end: 1069,
        loc: [SourceLocation],
        program: [Node],
        comments: [Array] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath: null,
     context:
      TraversalContext {
        queue: [Array],
        parentPath: undefined,
        scope: undefined,
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'File',
        start: 0,
        end: 1069,
        loc: [SourceLocation],
        program: [Node],
        comments: [Array] },
     listKey: undefined,
     inList: false,
     parentKey: 'program',
     key: 'program',
     node:
      Node {
        type: 'Program',
        start: 0,
        end: 1069,
        loc: [SourceLocation],
        sourceType: 'script',
        interpreter: null,
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [Circular],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: {},
        data: {},
        crawling: false },
     type: 'Program',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [NodePath], [NodePath], [NodePath], [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: {},
        data: {},
        crawling: false },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'VariableDeclaration',
       start: 45,
       end: 70,
       loc: [SourceLocation],
       declarations: [Array],
       kind: 'const',
       leadingComments: [Array] },
     Node {
       type: 'VariableDeclaration',
       start: 72,
       end: 97,
       loc: [SourceLocation],
       declarations: [Array],
       kind: 'const' },
     Node {
       type: 'ExpressionStatement',
       start: 101,
       end: 761,
       loc: [SourceLocation],
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 765,
       end: 832,
       loc: [SourceLocation],
       expression: [Node],
       trailingComments: [Array] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 3,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 765,
     end: 832,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 765,
        end: 831,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] },
     trailingComments:
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ] },
  scope:
   Scope {
     uid: 0,
     block:
      Node {
        type: 'Program',
        start: 0,
        end: 1069,
        loc: [SourceLocation],
        sourceType: 'script',
        interpreter: null,
        body: [Array],
        directives: [] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Circular],
        type: 'Program',
        typeAnnotation: null },
     labels: Map {},
     references:
      { expect: true,
        assert: true,
        shouldFail: true,
        done: true,
        x: true },
     bindings: { expect: [Binding], assert: [Binding] },
     globals: { describe: [Node], it: [Node], Math: [Node] },
     uids: {},
     data: {},
     crawling: false },
  type: 'ExpressionStatement',
  typeAnnotation: null }

an expression statement
NodePath {
  parent:
   Node {
     type: 'BlockStatement',
     start: 797,
     end: 830,
     loc: SourceLocation { start: [Position], end: [Position] },
     body: [ [Node] ],
     directives: [] },
  hub: undefined,
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExpressionStatement: { enter: [Array] },
     _exploded: true,
     _verified: true },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'ArrowFunctionExpression',
        start: 791,
        end: 830,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     hub: undefined,
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'ArrowFunctionExpression',
        start: 791,
        end: 830,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     listKey: undefined,
     inList: false,
     parentKey: 'body',
     key: 'body',
     node:
      Node {
        type: 'BlockStatement',
        start: 797,
        end: 830,
        loc: [SourceLocation],
        body: [Array],
        directives: [] },
     scope:
      Scope {
        uid: 10,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     type: 'BlockStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Node],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 10,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: {},
        bindings: {},
        globals: {},
        uids: {},
        data: {} },
     state: undefined,
     opts:
      { ExpressionStatement: [Object],
        _exploded: true,
        _verified: true },
     priorityQueue: [] },
  container:
   [ Node {
       type: 'ExpressionStatement',
       start: 802,
       end: 827,
       loc: [SourceLocation],
       expression: [Node] } ],
  listKey: 'body',
  inList: true,
  parentKey: 'body',
  key: 0,
  node:
   Node {
     type: 'ExpressionStatement',
     start: 802,
     end: 827,
     loc: SourceLocation { start: [Position], end: [Position] },
     expression:
      Node {
        type: 'CallExpression',
        start: 802,
        end: 826,
        loc: [SourceLocation],
        callee: [Node],
        arguments: [Array] } },
  scope:
   Scope {
     uid: 10,
     block:
      Node {
        type: 'ArrowFunctionExpression',
        start: 791,
        end: 830,
        loc: [SourceLocation],
        id: null,
        generator: false,
        async: false,
        params: [],
        body: [Node] },
     path:
      NodePath {
        parent: [Node],
        hub: undefined,
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Node],
        scope: [Circular],
        type: 'ArrowFunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: {},
     bindings: {},
     globals: {},
     uids: {},
     data: {} },
  type: 'ExpressionStatement',
  typeAnnotation: null }
